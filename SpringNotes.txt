
====================================
Spring Core Module with Annotations
====================================

=> It is base module of spring framework eco system.

=> Spring core is providing fundamental concepts of spring framework

	1) IoC Container

	2) Dependency Injection

	3) Auto Wiring

	4) Bean Scopes

	5) Bean lifecycle

Note: Using spring core module we can develop our java classes with loosely coupling.

==================================================
Q) How to represent java class as Spring Bean ?
==================================================

=> We have several annotations to represent our java class as Spring bean.

			1) @Component 

			2) @Service

			3) @Repository

			4) @Configuration

			5) @Bean

			6) @Controller

			7) @RestController

##### Note: Spring bean classes will be managed by IOC container.

==============================================================
Q) What is component scanning and how it works internally ?
==============================================================

=> It is the process of identifying spring beans available in the project.

=> Component Scanning will start from base pacakge name

=> Once base package scanning completed, then it will go for sub packages of base package.

Note: Any package name which is starting with base package name is considered as sub package.

		in.ashokit ----------> base package

		in.ashokit.dao --------> will be scanned bcz it is starting with base package name

		in.ashokit.service ----> will be scanned bcz it is starting with base package name

		in.ashokit.config -----> will be scanned bcz it is starting with base package name

		com.tcs.utils -----> will not scan bcz it is not starting with base package name


====================================
Spring Core Project Development	
====================================

## Step-1 : Create maven project and add spring-context dependency in pom.xml

<dependencies>		
	<dependency>
		<groupId>org.springframework</groupId>
		<artifactId>spring-context</artifactId>
		<version>6.2.11</version>
	</dependency>
</dependencies>	

## Step-2 : Create UserDao class and represent as spring bean using @Repository

```
package in.ashokit.dao;

import org.springframework.stereotype.Repository;

@Repository
public class UserDao {

	public UserDao() {
		System.out.println("UserDao :: Constructor");
	}

	public String getNameById(int id) {
		if (id == 100) {
			return "John";
		} else {
			return "Smith";
		}
	}
}
```

### Step-3 : Create UserService class and represent as spring bean using @Service

```
package in.ashokit.service;

import org.springframework.stereotype.Service;

import in.ashokit.dao.UserDao;

@Service
public class UserService {

	private UserDao userDao;

	public UserService() {
		System.out.println("UserService :: Constructor");
	}

	public void getName() {
		String nameById = userDao.getNameById(100);
		System.out.println(nameById);
	}
}
```

## Step-4 : Create AppConfig class and configure Component Scan with base package

```
@Configuration
@ComponentScan(basePackages = "in.ashokit")
public class AppConfig {

}
```

## Step-5 : Create main class to test the application with IoC container.

```
public class MyApp {

	public static void main(String[] args) {		

		// Starting IOC Container
		ApplicationContext ctxt = new AnnotationConfigApplicationContext(AppConfig.class);

		// Getting Spring Bean obj from IoC
		UserService us = ctxt.getBean(UserService.class);
		
		// calling user service bean method
		us.getName();
	}
}
```

==============================================
Q) @Component Vs @Service Vs @Repository
==============================================

=> These 3 annotations are part of spring framework and we can use in springboot also.

=> These annotations are also called as stereotype annotations.

=> By Using these 3 annotations we can represent java classes as spring beans.

Note: These 3 annotations are class level annotations.

Note: If we represent java class as spring bean then IOC will manage our classes (obj creation, dependency injection).

=================
1. @Component
=================

-> General-purpose stereotype.

-> Indicates that the class is a Spring-IOC-managed component.

-> Spring will autodetect this class through component scanning and register it as a spring bean.

```
@Component
public class PwdUtils {
	
	public PwdUtils() {
		System.out.println("PwdUtils :: Constructor");
	}
}
```

=================
2. @Service
=================

-> Specialization of @Component.

-> It is used to annotate service layer classes as spring beans.

-> Semantically tells the developer and Spring that this class contains business logic.

```
@Service
public class BookService {
	
}
```

=================
3. @Repostiory
=================

-> Another specialization of @Component.

=> It is Used to annotate DAO (Data Access Object) classes as Spring Beans.

=> It provides additional benefits like automatic exception translation from JDBC Expections into Spring DataAccessExceptions.

```
@Repository
public class UserDao {
	
}
```

============================
Q) What is @Bean annotation
============================

=> It is method level annotation.

=> It is used when we want to customize bean obj creation.


```
@Bean
public AppSecurity createInstance() {
	// logic
	return new AppSecurity("SHA-256");
}
```

=======================================
Q) What is @Configuration annotation ?
=======================================

=> It is used to represent java class as configuration class.

=> This configuration class is used as replacement for xml configuration.


----------------------------xml configuration---------------------------

<bean id="myService" class="com.example.MyService"/>

<bean id="myRepository" class="com.example.MyRepository"/>

-------------------------Annotation configuration--------------------------------

@Configuration
public class AppConfig {

    @Bean
    public MyService myService() {
        return new MyService();
    }

    @Bean
    public MyRepository myRepository() {
        return new MyRepository();
    }
}

========================
What is Auto Wiring ?
========================

=> It is used to enable automatic dependency injection in the application.

=> Instead of manually defining and injecting dependencies in your configuration, Spring can automatically resolve and inject beans into your class.

=> To Enable Autowiring we will use @Autowired annotation

=> We can use @Autowired annotation at 3 places

		1) constructor level (constructor injection)

		2) setter level (setter injection)

		3) field level (field injection)

---------------------------------------------------------------------
public interface IUserDao {
	
	public String getName(int id);

}
---------------------------------------------------------------------
@Repository
public class UserDaoImpl implements IUserDao {

	public UserDaoImpl() {
		System.out.println("UserDaoImpl :: Constructor");
	}

	@Override
	public String getName(int id) {
		return "John";
	}
}
---------------------------------------------------------------------
@Service
public class UserService {

	@Autowired
	private IUserDao userDao; // field injection
	
	public UserService() {
		System.out.println("UserService:: Constructor");
	}

	public void printName() {
		String name = userDao.getName(100);
		System.out.println("Name :: " + name);
	}
}
---------------------------------------------------------------------
@Configuration
@ComponentScan(basePackages = "in.ashokit")
public class AppConfig {
	
	public AppConfig() {
		System.out.println("AppConfig::Constructor");
	}

}
---------------------------------------------------------------------
public class MyApp {

	public static void main(String[] args) {

		// Starting IOC Container
		ApplicationContext ctxt = new AnnotationConfigApplicationContext(AppConfig.class);

		// get bean obj from ioc
		UserService bean = ctxt.getBean(UserService.class);

		// call bean method
		bean.printName();

	}
}
---------------------------------------------------------------------


======================
What is IOC Container
======================

=> IOC stands for Inversion of control.

=> IOC is used to manage & colloborate the classes and objects available in the application.

=> IOC will perform Dependency Injection in our application.

=> Injecting Dependent class object into target class object is called as Dependency Injection.


=============================
What is Dependency Injection
=============================
